/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2006 Arnout Engelen <arnouten[remove] at bzzt dot net>.
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 */
package org.twpp.text.impl.editor.highlight.language.cpp;

import org.twpp.text.impl.editor.highlight.language.DefaultJFlexLexer;
import org.twpp.text.impl.editor.highlight.language.Token;
import org.twpp.text.impl.editor.highlight.language.TokenType;

public final class CppLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\0\1\2\1\72\1\72\1\1\16\10\5\0\1\66\1\55"+
    "\1\5\1\6\1\66\1\66\1\57\1\60\1\61\1\4\1\32\1\66"+
    "\1\32\1\27\1\3\1\12\7\17\2\11\1\66\1\66\1\70\1\66"+
    "\1\67\1\66\1\0\3\16\1\25\1\31\1\25\5\7\1\23\10\7"+
    "\1\21\2\7\1\14\2\7\1\64\1\56\1\65\1\66\1\51\1\0"+
    "\1\35\1\33\1\15\1\26\1\30\1\24\1\45\1\41\1\44\1\6"+
    "\1\36\1\22\1\46\1\43\1\42\1\53\1\71\1\34\1\37\1\40"+
    "\1\20\1\54\1\52\1\13\1\47\1\50\1\62\1\66\1\63\1\66"+
    "\6\10\1\73\32\10\2\0\4\6\4\0\1\6\2\0\1\10\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\10\5\6"+
    "\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\10\2\0\236\6"+
    "\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\6"+
    "\5\0\3\6\15\0\5\10\6\0\1\6\4\0\13\10\5\0\53\6"+
    "\37\10\4\0\2\6\1\10\143\6\1\0\1\6\10\10\1\0\6\10"+
    "\2\6\2\10\1\0\4\10\2\6\12\10\3\6\2\0\1\6\17\0"+
    "\1\10\1\6\1\10\36\6\33\10\2\0\131\6\13\10\1\6\16\0"+
    "\12\10\41\6\11\10\2\6\4\0\1\6\5\0\26\6\4\10\1\6"+
    "\11\10\1\6\3\10\1\6\5\10\22\0\31\6\3\10\104\0\1\6"+
    "\1\0\13\6\67\0\33\10\1\0\4\10\66\6\3\10\1\6\22\10"+
    "\1\6\7\10\12\6\2\10\2\0\12\10\1\0\7\6\1\0\7\6"+
    "\1\0\3\10\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\10\1\6\7\10\2\0\2\10"+
    "\2\0\3\10\1\6\10\0\1\10\4\0\2\6\1\0\3\6\2\10"+
    "\2\0\12\10\4\6\7\0\1\6\5\0\3\10\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0"+
    "\1\10\7\0\4\6\1\0\1\6\7\0\14\10\3\6\1\10\13\0"+
    "\3\10\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\10\1\6\10\10\1\0\3\10\1\0"+
    "\3\10\2\0\1\6\17\0\2\6\2\10\2\0\12\10\1\0\1\6"+
    "\17\0\3\10\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\10\1\6\7\10\2\0\2\10"+
    "\2\0\3\10\10\0\2\10\4\0\2\6\1\0\3\6\2\10\2\0"+
    "\12\10\1\0\1\6\20\0\1\10\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\10\3\0\3\10\1\0\4\10"+
    "\2\0\1\6\6\0\1\10\16\0\12\10\11\0\1\6\7\0\3\10"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0"+
    "\2\6\6\0\2\6\2\10\2\0\12\10\22\0\2\10\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\10"+
    "\1\6\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\6"+
    "\1\0\2\6\2\10\2\0\12\10\1\0\2\6\17\0\2\10\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\10\1\0\3\10"+
    "\1\0\4\10\1\6\10\0\1\10\10\0\2\6\2\10\2\0\12\10"+
    "\12\0\6\6\2\0\2\10\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\10\4\0\6\10\1\0\1\10"+
    "\1\0\10\10\22\0\2\10\15\0\60\6\1\10\2\6\7\10\4\0"+
    "\10\6\10\10\1\0\12\10\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\10\2\6"+
    "\6\10\1\0\2\10\1\6\2\0\5\6\1\0\1\6\1\0\6\10"+
    "\2\0\12\10\2\0\4\6\40\0\1\6\27\0\2\10\6\0\12\10"+
    "\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\6\1\0"+
    "\44\6\4\0\24\10\1\0\2\10\5\6\13\10\1\0\44\10\11\0"+
    "\1\10\71\0\53\6\24\10\1\6\12\10\6\0\6\6\4\10\4\6"+
    "\3\10\1\6\3\10\2\6\7\10\3\6\4\10\15\6\14\10\1\6"+
    "\17\10\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\3\10\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\10\13\0\22\6\3\10\13\0\22\6\2\10\14\0\15\6"+
    "\1\0\3\6\1\0\2\10\14\0\64\6\40\10\3\0\1\6\3\0"+
    "\2\6\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\6"+
    "\10\0\51\6\1\10\1\6\5\0\106\6\12\0\35\6\3\0\14\10"+
    "\4\0\14\10\12\0\12\10\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\21\10\7\6\2\10\6\0\12\10\46\0\27\6\5\10\4\0\65\6"+
    "\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\6\130\0"+
    "\5\10\57\6\21\10\7\6\4\0\12\10\21\0\11\10\14\0\3\10"+
    "\36\6\15\10\2\6\12\10\54\6\16\10\14\0\44\6\24\10\10\0"+
    "\12\10\3\0\3\6\12\10\44\6\122\0\3\10\1\0\25\10\4\6"+
    "\1\10\4\6\3\10\2\6\11\0\300\6\47\10\25\0\4\10\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\10\30\0\1\72"+
    "\1\72\5\10\20\0\2\6\23\0\1\6\13\0\5\10\5\0\6\10"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\10"+
    "\4\0\1\10\3\0\14\10\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\10\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\10\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\10\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\10"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\10\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\10\2\6\24\0\57\6\1\10\4\0"+
    "\12\10\1\0\31\6\7\0\1\10\120\6\2\10\45\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\10"+
    "\3\6\1\10\4\6\1\10\27\6\5\10\20\0\1\6\7\0\64\6"+
    "\14\0\2\10\62\6\21\10\13\0\12\10\6\0\22\10\6\6\3\0"+
    "\1\6\4\0\12\10\34\6\10\10\2\0\27\6\15\10\14\0\35\6"+
    "\3\0\4\10\57\6\16\10\16\0\1\6\12\10\46\0\51\6\16\10"+
    "\11\0\3\6\1\10\10\6\2\10\2\0\12\10\6\0\27\6\3\0"+
    "\1\6\1\10\4\0\60\6\1\10\1\6\3\10\2\6\2\10\5\6"+
    "\2\10\1\6\1\10\1\6\30\0\3\6\2\0\13\6\5\10\2\0"+
    "\3\6\2\10\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\221\0\43\6\10\10\1\0\2\10\2\0\12\10\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\10\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\10\20\0"+
    "\7\10\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\10\4\0\1\6\13\0\12\10\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\10\4\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\105\0\65\6\210\0\1\10\202\0\35\6\3\0"+
    "\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\6\52\0\236\6\2\0\12\10\u0356\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\10"+
    "\1\0\2\10\5\0\4\10\4\6\1\0\3\6\1\0\33\6\4\0"+
    "\3\10\4\0\1\10\40\0\35\6\203\0\66\6\12\0\26\6\12\0"+
    "\23\6\215\0\111\6\u03b7\0\3\10\65\6\17\10\37\0\12\10\20\0"+
    "\3\10\55\6\13\10\2\0\1\10\22\0\31\6\7\0\12\10\6\0"+
    "\3\10\44\6\16\10\1\0\12\10\100\0\3\10\60\6\16\10\4\6"+
    "\13\0\12\10\u04a6\0\53\6\15\10\10\0\12\10\u0936\0\u036f\6\221\0"+
    "\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\10"+
    "\20\0\4\10\15\6\u4060\0\2\6\u2163\0\5\10\3\0\26\10\2\0"+
    "\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\6\1\0\107\6\1\0"+
    "\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0"+
    "\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0"+
    "\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\10\u1600\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\2\5\6\4"+
    "\1\2\16\4\2\1\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\2\2\1\14\1\0\1\3\6\0\7\5\1\0"+
    "\1\3\4\5\17\4\1\15\22\4\1\2\4\4\1\15"+
    "\12\4\1\0\1\16\3\0\2\14\11\0\1\17\3\0"+
    "\1\5\1\0\1\5\7\4\1\20\46\4\1\3\13\4"+
    "\12\0\32\4\1\5\16\4\1\0\1\17\4\0\1\4"+
    "\1\2\25\4\3\0\5\4\1\3\10\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\74\0\u0834\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\360\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u06cc\0\74\0\u17e8\0\u0708\0\u1824\0\u1860\0\74\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\360\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\360\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\360\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\74\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\360\0\u369c\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10"+
    "\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0"+
    "\0\u3f0c\0\u3f48";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\7\1\13\1\7\1\10"+
    "\1\14\1\7\1\15\1\7\1\16\1\7\1\17\1\20"+
    "\1\21\1\7\1\4\1\22\1\23\1\24\1\6\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\32\1\33\2\6"+
    "\1\7\1\34\1\35\1\36\1\37\1\2\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\4\1\47\1\50"+
    "\1\6\101\0\1\51\1\52\74\0\1\53\1\0\1\53"+
    "\1\0\2\53\1\0\1\53\1\0\2\53\1\54\1\53"+
    "\1\55\1\53\1\0\1\53\1\56\1\0\1\57\1\53"+
    "\12\0\1\60\4\0\1\53\1\0\1\61\26\0\21\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\5\0\1\53\1\6\1\7\1\6\2\7\1\6\1\7"+
    "\1\6\2\7\1\6\1\7\1\6\1\7\1\6\1\7"+
    "\1\6\1\0\1\6\1\7\1\0\16\6\1\7\3\6"+
    "\14\0\1\6\1\0\1\6\5\0\1\53\1\0\1\53"+
    "\1\0\2\10\1\0\1\53\1\0\1\53\1\10\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\66\1\70\1\71"+
    "\1\72\17\0\1\53\27\0\1\53\1\0\1\53\1\0"+
    "\1\73\1\74\1\75\1\76\1\0\1\53\1\74\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\66\1\70\1\71"+
    "\1\72\17\0\1\53\30\0\21\6\1\0\2\6\1\0"+
    "\7\6\1\77\12\6\14\0\1\6\1\0\1\6\6\0"+
    "\14\6\1\100\4\6\1\0\2\6\1\0\2\6\1\101"+
    "\3\6\1\102\1\103\1\6\1\104\10\6\14\0\1\6"+
    "\1\0\1\6\6\0\12\6\1\105\6\6\1\0\2\6"+
    "\1\0\4\6\1\106\3\6\1\107\11\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\7\6"+
    "\1\110\12\6\14\0\1\6\1\0\1\6\6\0\14\6"+
    "\1\111\4\6\1\0\2\6\1\0\1\6\1\112\1\113"+
    "\4\6\1\114\12\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\1\115\1\6\1\0\7\6\1\116\12\6"+
    "\14\0\1\6\1\0\1\6\11\0\2\70\4\0\1\70"+
    "\62\0\5\6\1\117\6\6\1\120\4\6\1\0\2\6"+
    "\1\0\10\6\1\121\11\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\1\6\1\122\5\6"+
    "\1\123\1\6\1\124\10\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\1\125\1\6\1\0\22\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\10\6\1\126\11\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\1\127\1\6\1\0\2\6\1\130\2\6"+
    "\1\131\1\132\2\6\1\133\5\6\1\134\2\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\1\135\1\6"+
    "\1\0\1\6\1\136\4\6\1\137\5\6\1\140\5\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\1\6\1\141\16\6\1\142\1\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\1\143\1\6\1\0"+
    "\2\6\1\144\4\6\1\145\12\6\14\0\1\6\1\0"+
    "\1\6\6\0\16\6\1\146\2\6\1\0\2\6\1\0"+
    "\10\6\1\147\11\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\7\6\1\150\12\6\14\0"+
    "\1\6\1\0\1\6\6\0\12\6\1\151\6\6\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\7\6\1\152\11\6\1\0\2\6\1\0\6\6\1\153"+
    "\13\6\14\0\1\6\1\0\1\6\6\0\12\6\1\154"+
    "\6\6\1\0\2\6\1\0\1\6\1\155\20\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\2\6\1\156\4\6\1\157\1\6\1\160\10\6\14\0"+
    "\1\6\1\0\1\6\2\161\1\162\52\161\1\162\1\163"+
    "\15\161\2\164\1\162\53\164\1\165\1\162\14\164\67\0"+
    "\1\4\74\0\1\4\3\0\1\51\1\166\1\167\71\51"+
    "\4\170\1\171\67\170\5\0\1\53\1\0\1\53\1\0"+
    "\2\53\1\0\1\53\1\0\2\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\3\0\1\53\17\0\1\53\61\0"+
    "\1\172\3\0\1\173\74\0\1\174\57\0\1\175\65\0"+
    "\1\176\11\0\1\177\6\0\1\200\54\0\1\201\16\0"+
    "\1\202\2\0\1\203\61\0\1\204\57\0\2\66\2\64"+
    "\55\0\1\53\1\0\1\53\1\0\2\53\1\0\1\53"+
    "\1\0\2\53\1\66\1\67\1\64\1\65\1\0\1\53"+
    "\3\0\1\53\17\0\1\53\42\0\2\66\57\0\1\53"+
    "\1\0\1\53\1\0\2\53\1\0\1\53\1\0\2\53"+
    "\1\66\1\67\1\0\1\53\1\0\1\53\3\0\1\53"+
    "\17\0\1\53\33\0\2\70\4\0\1\70\4\0\3\66"+
    "\1\0\2\71\53\0\2\205\4\0\1\205\12\0\1\206"+
    "\46\0\1\53\1\0\1\53\1\0\2\207\1\0\1\53"+
    "\1\0\1\53\1\207\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\3\0\1\53\1\206\16\0\1\53\27\0\1\53"+
    "\1\0\1\53\1\0\2\73\1\0\1\53\1\0\1\53"+
    "\1\73\1\0\1\53\1\0\1\53\1\66\1\67\1\66"+
    "\1\70\1\71\1\72\17\0\1\53\27\0\1\53\1\0"+
    "\1\53\1\0\1\73\1\74\1\0\1\53\1\0\1\53"+
    "\1\74\1\62\1\63\1\64\1\65\1\66\1\67\1\66"+
    "\1\70\1\71\1\72\17\0\1\53\33\0\2\75\2\0"+
    "\3\75\2\62\2\64\3\75\1\0\2\75\1\0\1\75"+
    "\1\0\1\75\43\0\1\53\1\0\1\53\1\0\2\76"+
    "\1\0\1\53\1\75\2\76\1\62\1\63\1\64\1\65"+
    "\1\75\1\76\1\75\1\0\1\75\1\76\1\0\1\75"+
    "\1\0\1\75\13\0\1\53\30\0\21\6\1\0\2\6"+
    "\1\0\1\6\1\141\20\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\210\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\4\6\1\211\1\212\14\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\2\6\1\213"+
    "\17\6\14\0\1\6\1\0\1\6\6\0\12\6\1\214"+
    "\6\6\1\0\2\6\1\0\10\6\1\215\2\6\1\216"+
    "\6\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\2\6\1\0\10\6\1\217\11\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\11\6\1\220"+
    "\10\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\2\6\1\0\11\6\1\221\10\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\4\6\1\222"+
    "\4\6\1\223\10\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\10\6\1\224\11\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\7\6\1\225\12\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\11\6\1\226\10\6\14\0"+
    "\1\6\1\0\1\6\6\0\14\6\1\227\4\6\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\1\6\1\146\20\6\14\0"+
    "\1\6\1\0\1\6\6\0\14\6\1\230\1\6\1\231"+
    "\2\6\1\0\2\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\12\6\1\232\6\6\1\0\2\6\1\0"+
    "\22\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\2\6\1\0\5\6\1\233\12\6\1\234\1\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\4\6\1\211\15\6\14\0\1\6\1\0\1\6\6\0"+
    "\12\6\1\235\6\6\1\0\2\6\1\0\22\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\1\236\1\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\7\6\1\237\12\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6"+
    "\1\240\14\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\5\6\1\241\4\6\1\242\7\6"+
    "\14\0\1\6\1\0\1\6\6\0\20\6\1\141\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\14\6\1\243\4\6\1\0\2\6\1\0\2\6\1\244"+
    "\17\6\14\0\1\6\1\0\1\6\6\0\16\6\1\245"+
    "\2\6\1\0\2\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\1\6\1\246"+
    "\1\247\17\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\7\6\1\250\12\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\12\6"+
    "\1\251\2\6\1\252\4\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\11\6\1\253\10\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\13\6\1\254\6\6\14\0\1\6\1\0\1\6"+
    "\6\0\12\6\1\255\6\6\1\0\2\6\1\0\14\6"+
    "\1\146\5\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\1\6\1\256\7\6\1\257\10\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\20\6\1\260\1\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\16\6\1\261\3\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\1\262"+
    "\1\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\17\6\1\146\2\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\13\6\1\263\6\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\5\6\1\141\3\6\1\264"+
    "\10\6\14\0\1\6\1\0\1\6\6\0\14\6\1\265"+
    "\4\6\1\0\2\6\1\0\5\6\1\266\14\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\5\6\1\267\14\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\5\6\1\270\14\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\6\6\1\271\13\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\11\6\1\272\10\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\1\273\21\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\7\6\1\274\1\6\1\275\10\6"+
    "\14\0\1\6\1\0\1\6\6\0\14\6\1\276\4\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\14\6\1\277\4\6\1\0\2\6\1\0\11\6"+
    "\1\300\10\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\1\6\1\301\20\6\14\0\1\6"+
    "\1\0\1\6\2\161\1\162\71\161\2\164\1\162\71\164"+
    "\2\0\1\167\71\0\4\170\1\302\67\170\3\0\1\167"+
    "\1\171\133\0\1\303\55\0\1\304\110\0\1\305\54\0"+
    "\1\55\106\0\1\305\4\0\1\306\63\0\1\307\65\0"+
    "\1\310\73\0\1\304\14\0\1\173\45\0\1\311\131\0"+
    "\1\312\55\0\1\313\47\0\2\205\4\0\1\205\4\0"+
    "\3\66\56\0\2\205\4\0\1\205\61\0\1\53\1\0"+
    "\1\53\1\0\2\207\1\0\1\53\1\0\1\53\1\207"+
    "\1\0\1\53\1\0\1\53\1\66\1\67\1\66\2\0"+
    "\1\53\17\0\1\53\30\0\21\6\1\0\2\6\1\0"+
    "\4\6\1\257\15\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\1\146\1\6\1\0\22\6\14\0\1\6"+
    "\1\0\1\6\6\0\7\6\1\314\11\6\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\1\6\1\266\20\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\5\6"+
    "\1\217\14\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\4\6\1\315\1\316\14\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\20\6\1\317\1\6\14\0\1\6\1\0\1\6\6\0"+
    "\20\6\1\146\1\0\2\6\1\0\22\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\10\6"+
    "\1\320\11\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\11\6\1\321\10\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\7\6"+
    "\1\322\12\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\12\6\1\266\7\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6"+
    "\1\315\17\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\1\323\1\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\4\6\1\255"+
    "\15\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\1\324\1\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\325\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\1\326\21\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\1\327\1\6\1\0\22\6\14\0\1\6"+
    "\1\0\1\6\6\0\14\6\1\330\4\6\1\0\2\6"+
    "\1\0\7\6\1\250\12\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\13\6\1\146\6\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\2\6\1\331\17\6\14\0\1\6\1\0\1\6"+
    "\6\0\14\6\1\266\4\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\2\6\1\332\4\6\1\333\12\6\14\0\1\6"+
    "\1\0\1\6\6\0\12\6\1\334\6\6\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\11\6\1\335\10\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\1\336\1\6\1\0"+
    "\22\6\14\0\1\6\1\0\1\6\6\0\14\6\1\337"+
    "\4\6\1\0\2\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\1\340\1\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\12\6\1\341\6\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\5\6\1\342\14\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\1\6\1\315\20\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\10\6\1\343\11\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\1\344"+
    "\1\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\5\6\1\212\14\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\20\6\1\345\1\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\1\346\1\6\1\0\22\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\1\347\1\6\1\0"+
    "\7\6\1\143\12\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\4\6\1\146\15\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\1\350\1\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\1\351\1\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\1\6\1\352"+
    "\20\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\1\353\1\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\10\6\1\354\11\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\11\6\1\355\10\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\7\6\1\146\12\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\2\6\1\356\17\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\357\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\14\6\1\211\4\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\14\6\1\360\4\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\5\6\1\361\14\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\21\6\1\362\14\0"+
    "\1\6\1\0\1\6\6\0\12\6\1\211\6\6\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\2\6\1\363\17\6\14\0"+
    "\1\6\1\0\1\6\6\0\20\6\1\266\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\5\6\1\364\14\6\14\0\1\6"+
    "\1\0\1\6\3\170\1\167\1\302\67\170\43\0\1\365"+
    "\60\0\1\306\73\0\1\366\67\0\1\366\111\0\1\367"+
    "\75\0\1\306\51\0\1\370\113\0\1\371\76\0\1\372"+
    "\34\0\21\6\1\0\2\6\1\0\6\6\1\146\13\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\5\6\1\266\14\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\11\6\1\373\10\6"+
    "\14\0\1\6\1\0\1\6\6\0\14\6\1\374\4\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\12\6\1\146\7\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\12\6\1\251\7\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\10\6\1\266\11\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\10\6\1\220\11\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\5\6\1\211\14\6"+
    "\14\0\1\6\1\0\1\6\6\0\12\6\1\375\6\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\14\6\1\376\4\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\1\6\1\322\20\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\11\6\1\377\10\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\3\6\1\146\16\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\10\6\1\u0100\11\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\1\6\1\374\20\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\1\6\1\u0101\20\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\4\6\1\u0102\15\6\14\0\1\6\1\0\1\6"+
    "\6\0\7\6\1\u0103\11\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\1\220"+
    "\1\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\7\6\1\u0104\11\6\1\0\2\6\1\0\22\6\14\0"+
    "\1\6\1\0\1\6\6\0\7\6\1\315\11\6\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\11\6\1\u0105\10\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\1\300\1\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\7\6\1\u0106\12\6\14\0\1\6"+
    "\1\0\1\6\6\0\14\6\1\u0107\4\6\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\2\6\1\220\17\6\14\0\1\6"+
    "\1\0\1\6\6\0\20\6\1\u0108\1\0\2\6\1\0"+
    "\10\6\1\u0109\1\220\10\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\22\6\14\0\1\374"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\2\6"+
    "\1\u010a\17\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\4\6\1\u010b\15\6\14\0\1\6"+
    "\1\0\1\6\6\0\14\6\1\265\4\6\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\2\6\1\0\10\6\1\211\11\6\14\0\1\6"+
    "\1\0\1\6\6\0\21\6\1\0\2\6\1\0\1\272"+
    "\21\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\2\6\1\0\1\6\1\u010c\20\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\2\6\1\0\11\6\1\u010d"+
    "\10\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\1\u010e\1\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\u010f\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\5\6\1\u0110\14\6\14\0\1\6\1\0\1\6"+
    "\6\0\12\6\1\u0111\6\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\45\0\1\366\62\0\1\366"+
    "\57\0\1\u0112\107\0\1\u0113\105\0\1\u0114\33\0\21\6"+
    "\1\0\2\6\1\0\10\6\1\276\11\6\14\0\1\6"+
    "\1\0\1\6\6\0\14\6\1\u0115\4\6\1\0\2\6"+
    "\1\0\22\6\14\0\1\6\1\0\1\6\6\0\21\6"+
    "\1\0\1\266\1\6\1\0\22\6\14\0\1\6\1\0"+
    "\1\6\6\0\7\6\1\u0116\11\6\1\0\2\6\1\0"+
    "\22\6\14\0\1\6\1\0\1\6\6\0\20\6\1\374"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\10\6\1\146\11\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\5\6\1\u0117\14\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\5\6\1\u0118\14\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\2\6\1\u0119\17\6\14\0\1\6\1\0\1\6"+
    "\6\0\7\6\1\u011a\11\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\16\6\1\146\2\6"+
    "\1\0\2\6\1\0\22\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\324\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\1\u0106"+
    "\1\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\2\6\1\u011b\17\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\5\6\1\u011c\14\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\20\6\1\u011d\1\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\16\6\1\315\3\6\14\0\1\6\1\0\1\6\6\0"+
    "\7\6\1\266\11\6\1\0\2\6\1\0\22\6\14\0"+
    "\1\6\1\0\1\6\6\0\7\6\1\u011e\11\6\1\0"+
    "\2\6\1\0\22\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\5\6\1\376\14\6\14\0"+
    "\1\6\1\0\1\6\6\0\21\6\1\0\2\6\1\0"+
    "\11\6\1\326\10\6\14\0\1\6\1\0\1\6\6\0"+
    "\21\6\1\0\2\6\1\0\2\6\1\u011f\17\6\14\0"+
    "\1\6\1\0\1\6\26\0\1\305\105\0\1\366\70\0"+
    "\1\366\44\0\21\6\1\0\2\6\1\0\5\6\1\146"+
    "\14\6\14\0\1\6\1\0\1\6\6\0\21\6\1\0"+
    "\2\6\1\0\11\6\1\315\10\6\14\0\1\6\1\0"+
    "\1\6\6\0\21\6\1\0\1\213\1\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\2\6\1\u0120\17\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\4\6\1\u0115\15\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\16\6\1\340\3\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\13\6\1\211\6\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\7\6\1\333\12\6\14\0\1\6\1\0\1\6"+
    "\6\0\21\6\1\0\2\6\1\0\2\6\1\u0121\17\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\5\6\1\343\14\6\14\0\1\6\1\0\1\6"+
    "\6\0\14\6\1\146\4\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\10\6\1\u0122\11\6\14\0\1\6\1\0\1\6"+
    "\6\0\7\6\1\211\11\6\1\0\2\6\1\0\22\6"+
    "\14\0\1\6\1\0\1\6\6\0\21\6\1\0\2\6"+
    "\1\0\14\6\1\146\5\6\14\0\1\6\1\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\34\1\6\11\3\1\1\0"+
    "\1\1\6\0\4\1\1\11\2\1\1\0\67\1\1\0"+
    "\1\11\3\0\1\1\1\11\11\0\1\1\3\0\1\1"+
    "\1\0\73\1\12\0\51\1\1\0\1\11\4\0\27\1"+
    "\3\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    public CppLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2882) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 17: break;
          case 2: 
            { return token(TokenType.OPERATOR);
            }
          case 18: break;
          case 3: 
            { return token(TokenType.TYPE);
            }
          case 19: break;
          case 4: 
            { return token(TokenType.IDENTIFIER);
            }
          case 20: break;
          case 5: 
            { return token(TokenType.NUMBER);
            }
          case 21: break;
          case 6: 
            { return token(TokenType.OPERATOR,  PARAN);
            }
          case 22: break;
          case 7: 
            { return token(TokenType.OPERATOR, -PARAN);
            }
          case 23: break;
          case 8: 
            { return token(TokenType.OPERATOR,  CURLY);
            }
          case 24: break;
          case 9: 
            { return token(TokenType.OPERATOR, -CURLY);
            }
          case 25: break;
          case 10: 
            { return token(TokenType.OPERATOR,  BRACKET);
            }
          case 26: break;
          case 11: 
            { return token(TokenType.OPERATOR, -BRACKET);
            }
          case 27: break;
          case 12: 
            { return token(TokenType.COMMENT);
            }
          case 28: break;
          case 13: 
            { return token(TokenType.KEYWORD);
            }
          case 29: break;
          case 14: 
            { return token(TokenType.STRING);
            }
          case 30: break;
          case 15: 
            { return token(TokenType.KEYWORD2);
            }
          case 31: break;
          case 16: 
            { return token(TokenType.TYPE2);
            }
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
