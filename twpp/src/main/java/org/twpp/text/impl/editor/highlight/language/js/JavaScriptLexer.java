/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.twpp.text.impl.editor.highlight.language.js;

import org.twpp.text.impl.editor.highlight.language.DefaultJFlexLexer;
import org.twpp.text.impl.editor.highlight.language.Token;
import org.twpp.text.impl.editor.highlight.language.TokenType;

public final class JavaScriptLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\110\1\111\1\1\16\7\4\0\1\3\1\104"+
    "\1\24\1\0\1\6\1\104\1\105\1\25\1\72\1\73\1\5\1\107"+
    "\1\100\1\23\1\21\1\4\1\10\1\16\2\15\4\17\2\11\1\71"+
    "\1\100\1\103\1\101\1\102\1\100\1\0\1\62\1\63\1\57\1\14"+
    "\1\22\1\20\2\6\1\53\2\6\1\12\1\64\1\54\1\65\2\6"+
    "\1\56\1\70\1\6\1\55\2\6\1\13\2\6\1\76\1\26\1\77"+
    "\1\104\1\6\1\0\1\32\1\27\1\34\1\44\1\31\1\46\1\51"+
    "\1\37\1\42\1\66\1\33\1\45\1\60\1\41\1\40\1\61\1\6"+
    "\1\30\1\35\1\36\1\43\1\52\1\50\1\67\1\47\1\6\1\74"+
    "\1\106\1\75\1\100\6\7\1\112\32\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0"+
    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7"+
    "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7"+
    "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0"+
    "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7"+
    "\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7"+
    "\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7"+
    "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0"+
    "\5\7\30\0\1\110\1\110\5\7\20\0\2\6\23\0\1\6\13\0"+
    "\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0"+
    "\33\6\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0"+
    "\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0"+
    "\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0"+
    "\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0"+
    "\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0"+
    "\57\6\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7"+
    "\45\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6"+
    "\115\0\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0"+
    "\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0"+
    "\22\7\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6"+
    "\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7"+
    "\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7"+
    "\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6"+
    "\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7"+
    "\202\0\35\6\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6"+
    "\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7"+
    "\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6"+
    "\2\0\27\6\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6"+
    "\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6"+
    "\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6"+
    "\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7"+
    "\37\0\12\7\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6"+
    "\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7"+
    "\60\6\16\7\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7"+
    "\u0936\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6"+
    "\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7"+
    "\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7"+
    "\u1600\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6"+
    "\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6"+
    "\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\2\2\1\3\2\4\1\3\2\2\1\5"+
    "\1\6\27\3\1\2\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\5\2\1\15\2\16\1\17\1\1\1\15\1\20"+
    "\1\21\1\0\1\22\3\4\1\0\3\4\1\0\17\3"+
    "\1\23\23\3\1\2\1\24\2\15\2\21\2\0\4\4"+
    "\1\0\31\3\1\25\10\3\1\15\1\0\2\4\1\22"+
    "\24\3\2\4\21\3\2\4\14\3\2\4\6\3\2\4"+
    "\4\3\2\4\1\3\2\4\1\3\1\0\1\4\1\3"+
    "\1\0\1\4\1\3\1\0\1\4\1\3\1\0\1\4"+
    "\1\3\1\0\1\4\1\3\1\0\1\4\1\0\1\4"+
    "\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\341\0\341"+
    "\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627"+
    "\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f"+
    "\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\341"+
    "\0\341\0\341\0\341\0\341\0\341\0\341\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\341\0\341\0\u0ce4"+
    "\0\u0d2f\0\341\0\u0d7a\0\u0dc5\0\341\0\u0e10\0\u0e5b\0\341"+
    "\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068\0\u10b3"+
    "\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u0258\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932\0\u197d\0\u19c8"+
    "\0\u1a13\0\341\0\u1a5e\0\u1aa9\0\u1af4\0\341\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u0258\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\341"+
    "\0\u26f7\0\u2742\0\u278d\0\u0258\0\u27d8\0\u2823\0\u286e\0\u28b9"+
    "\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1"+
    "\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219"+
    "\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471"+
    "\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u367e\0\u36c9"+
    "\0\u3714\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921"+
    "\0\u396c\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79"+
    "\0\u3bc4\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1"+
    "\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029"+
    "\0\u4074\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281"+
    "\0\u42cc\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\4"+
    "\1\12\1\13\2\11\1\14\3\13\1\11\1\15\1\11"+
    "\1\16\1\17\1\20\1\4\1\21\1\22\1\23\2\11"+
    "\1\24\1\25\1\26\2\11\1\27\1\30\1\31\1\32"+
    "\1\11\1\33\1\11\1\34\1\35\1\36\1\37\1\40"+
    "\1\11\1\41\2\11\1\42\1\43\1\44\1\45\1\46"+
    "\2\11\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\50\1\10\1\57\1\60\1\10\1\61\1\62"+
    "\1\63\1\0\1\6\1\0\1\64\1\65\1\66\21\64"+
    "\1\67\1\64\1\70\64\64\1\71\1\65\1\66\22\71"+
    "\1\72\1\70\64\71\115\0\1\4\113\0\1\6\105\0"+
    "\1\6\5\0\1\73\1\74\73\0\1\50\112\0\1\50"+
    "\17\0\13\11\1\0\1\11\4\0\42\11\1\75\20\0"+
    "\1\11\10\0\1\76\1\77\1\100\1\101\1\100\1\102"+
    "\1\103\1\102\1\100\1\104\1\105\6\0\1\105\12\0"+
    "\3\100\20\0\1\101\33\0\2\13\1\100\1\0\1\100"+
    "\3\13\1\100\1\104\1\105\6\0\1\105\12\0\3\100"+
    "\52\0\13\11\1\0\1\11\4\0\3\11\1\106\36\11"+
    "\1\75\20\0\1\11\10\0\2\104\3\0\3\104\116\0"+
    "\1\50\55\0\1\50\17\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\107\40\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\110\37\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\111"+
    "\3\11\1\112\3\11\1\113\4\11\1\114\16\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\115\5\11\1\116\30\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\21\11\1\117\20\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\120\6\11\1\121\31\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\122\11\11\1\123"+
    "\25\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\124\3\11\1\125\4\11\1\125\22\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\126\27\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\127\6\11\1\125\30\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\130\5\11\1\131\1\11\1\132\1\133\25\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\134\2\11\1\135\26\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\136\30\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\131\36\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\137\27\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\140"+
    "\10\11\1\141\25\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\142\37\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\143"+
    "\36\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\144\40\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\145\30\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\146\36\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\147\41\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\150\32\11\1\75"+
    "\20\0\1\11\101\0\1\50\1\151\111\0\1\50\1\0"+
    "\1\10\110\0\1\50\3\0\1\50\106\0\1\50\4\0"+
    "\1\50\105\0\1\50\5\0\1\50\3\0\1\64\2\0"+
    "\21\64\1\0\1\64\1\0\64\64\2\0\1\66\110\0"+
    "\1\152\2\0\5\152\1\153\4\152\2\153\1\154\70\152"+
    "\3\0\1\71\2\0\22\71\2\0\64\71\1\73\1\155"+
    "\1\156\110\73\5\157\1\160\105\157\10\0\1\76\1\77"+
    "\1\100\1\0\1\100\1\102\1\103\1\102\1\100\1\104"+
    "\1\105\6\0\1\105\12\0\3\100\54\0\2\77\2\0"+
    "\1\100\3\77\1\100\1\104\1\105\6\0\1\105\12\0"+
    "\1\100\1\0\1\100\54\0\1\161\1\162\2\0\5\162"+
    "\1\0\1\162\4\0\1\162\1\0\2\162\1\0\1\162"+
    "\7\0\1\162\1\0\1\162\10\0\1\162\2\0\2\162"+
    "\37\0\1\163\1\77\1\100\1\0\1\100\3\163\1\100"+
    "\1\104\1\105\6\0\1\105\12\0\3\100\54\0\1\102"+
    "\1\77\1\100\1\0\1\100\3\102\1\100\1\104\1\105"+
    "\6\0\1\105\12\0\3\100\54\0\2\104\2\0\1\100"+
    "\3\104\1\100\1\0\1\105\6\0\1\105\12\0\1\100"+
    "\1\0\1\100\54\0\2\164\3\0\3\164\3\0\1\165"+
    "\63\0\1\165\11\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\166\32\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\167\37\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\170\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\171\34\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\172\34\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\173"+
    "\33\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\174\36\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\173\1\175\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\176\27\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\177\26\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\14\11\1\173"+
    "\3\11\1\125\21\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\200\26\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\125"+
    "\20\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\201\23\11\1\75\20\0\1\11\6\0"+
    "\12\11\1\202\1\0\1\11\4\0\25\11\1\203\14\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\204\12\11\1\205\24\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\206\10\11"+
    "\1\207\1\210\22\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\113\23\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\125"+
    "\40\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\211\27\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\212\27\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\13\11"+
    "\1\213\26\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\214\32\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\215\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\216\22\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\217\14\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\31\11\1\220"+
    "\10\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\22\11\1\221\17\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\222\40\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\223\40\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\224\30\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\225\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\37\11\1\226\2\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\227\40\11\1\75\20\0"+
    "\1\11\101\0\1\50\1\10\20\0\1\154\4\0\3\154"+
    "\103\0\1\230\4\0\3\230\75\0\1\156\110\0\5\157"+
    "\1\231\105\157\4\0\1\156\1\160\115\0\1\161\1\162"+
    "\1\100\1\0\5\162\1\0\1\162\4\0\1\162\1\0"+
    "\2\162\1\0\1\162\7\0\1\162\1\100\1\162\10\0"+
    "\1\162\2\0\2\162\37\0\2\232\1\100\1\0\5\232"+
    "\1\0\1\232\4\0\1\232\1\0\2\232\1\0\1\232"+
    "\7\0\1\232\1\100\1\232\10\0\1\232\2\0\2\232"+
    "\37\0\1\233\1\77\1\100\1\0\1\100\3\233\1\100"+
    "\1\104\1\105\6\0\1\105\12\0\3\100\54\0\2\164"+
    "\2\0\1\100\3\164\1\100\23\0\1\100\1\0\1\100"+
    "\54\0\2\164\3\0\3\164\101\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\234\37\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\235\36\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\236\25\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\237\36\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\240\30\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\125\37\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\217\23\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\214"+
    "\34\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\241\32\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\175\32\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\125\33\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\16\11\1\125\23\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\242\26\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\140\36\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\111\33\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\243"+
    "\37\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\244\30\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\245\37\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\246\36\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\247\36\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\250\34\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\173\23\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\125\31\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\125"+
    "\30\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\13\11\1\251\26\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\252\41\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\253\4\0\42\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\254\33\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\255\36\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\16\11\1\256\23\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\234\31\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\257\37\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\13\11\1\260"+
    "\26\11\1\75\20\0\1\11\4\157\1\156\1\231\105\157"+
    "\10\0\2\261\1\100\1\0\5\261\1\0\1\261\4\0"+
    "\1\261\1\0\2\261\1\0\1\261\7\0\1\261\1\100"+
    "\1\261\10\0\1\261\2\0\2\261\37\0\1\262\1\77"+
    "\1\100\1\0\1\100\3\262\1\100\1\104\1\105\6\0"+
    "\1\105\12\0\3\100\52\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\125\35\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\263\40\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\32\11\1\264"+
    "\7\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\265\24\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\266\26\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\267\27\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\270\22\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\271\24\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\173\32\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\272\25\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\273"+
    "\23\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\274\32\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\275\27\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\276\37\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\40\11\1\277\1\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\300\37\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\234\21\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\301\37\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\302"+
    "\34\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\12\11\1\303\27\11\1\75\20\0\1\11\10\0"+
    "\2\304\1\100\1\0\5\304\1\0\1\304\4\0\1\304"+
    "\1\0\2\304\1\0\1\304\7\0\1\304\1\100\1\304"+
    "\10\0\1\304\2\0\2\304\37\0\1\305\1\77\1\100"+
    "\1\0\1\100\3\305\1\100\1\104\1\105\6\0\1\105"+
    "\12\0\3\100\52\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\125\27\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\217\37\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\306\37\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\307\27\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\310\26\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\13\11\1\311"+
    "\26\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\312\37\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\313\23\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11"+
    "\1\314\23\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\13\11\1\315\26\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\316\26\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\234\40\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\32\11\1\234\7\11\1\75\20\0"+
    "\1\11\6\0\12\11\1\317\1\0\1\11\4\0\24\11"+
    "\1\320\15\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\321\36\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\234\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\22\11\1\234\17\11\1\75\20\0\1\11\10\0\2\322"+
    "\1\100\1\0\5\322\1\0\1\322\4\0\1\322\1\0"+
    "\2\322\1\0\1\322\7\0\1\322\1\100\1\322\10\0"+
    "\1\322\2\0\2\322\37\0\1\323\1\77\1\100\1\0"+
    "\1\100\3\323\1\100\1\104\1\105\6\0\1\105\12\0"+
    "\3\100\52\0\13\11\1\0\1\11\4\0\26\11\1\324"+
    "\13\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\173\25\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\264\32\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\325\27\11\1\75\20\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\26\11\1\326\13\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\125\32\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\20\11\1\125\21\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\263\30\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\327"+
    "\32\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\16\11\1\330\23\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\331\27\11\1\75"+
    "\20\0\1\11\6\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\234\27\11\1\75\20\0\1\11\10\0\2\332\1\100"+
    "\1\0\5\332\1\0\1\332\4\0\1\332\1\0\2\332"+
    "\1\0\1\332\7\0\1\332\1\100\1\332\10\0\1\332"+
    "\2\0\2\332\37\0\1\333\1\77\1\100\1\0\1\100"+
    "\3\333\1\100\1\104\1\105\6\0\1\105\12\0\3\100"+
    "\52\0\13\11\1\0\1\11\4\0\27\11\1\334\12\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\335\37\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\27\11\1\336\12\11\1\75\20\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\217"+
    "\21\11\1\75\20\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\337\30\11\1\75\20\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\217\32\11\1\75"+
    "\20\0\1\11\10\0\2\340\1\100\1\0\5\340\1\0"+
    "\1\340\4\0\1\340\1\0\2\340\1\0\1\340\7\0"+
    "\1\340\1\100\1\340\10\0\1\340\2\0\2\340\37\0"+
    "\1\341\1\77\1\100\1\0\1\100\3\341\1\100\1\104"+
    "\1\105\6\0\1\105\12\0\3\100\52\0\13\11\1\0"+
    "\1\11\4\0\24\11\1\342\15\11\1\75\20\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\217\24\11"+
    "\1\75\20\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\24\11\1\217\15\11\1\75\20\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\331\36\11\1\75\20\0"+
    "\1\11\10\0\2\343\1\100\1\0\5\343\1\0\1\343"+
    "\4\0\1\343\1\0\2\343\1\0\1\343\7\0\1\343"+
    "\1\100\1\343\10\0\1\343\2\0\2\343\37\0\1\344"+
    "\1\77\1\100\1\0\1\100\3\344\1\100\1\104\1\105"+
    "\6\0\1\105\12\0\3\100\52\0\13\11\1\0\1\11"+
    "\4\0\30\11\1\345\11\11\1\75\20\0\1\11\10\0"+
    "\2\346\1\100\1\0\5\346\1\0\1\346\4\0\1\346"+
    "\1\0\2\346\1\0\1\346\7\0\1\346\1\100\1\346"+
    "\10\0\1\346\2\0\2\346\37\0\1\347\1\77\1\100"+
    "\1\0\1\100\3\347\1\100\1\104\1\105\6\0\1\105"+
    "\12\0\3\100\52\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\350\30\11\1\75\20\0\1\11\10\0\2\351\1\100"+
    "\1\0\5\351\1\0\1\351\4\0\1\351\1\0\2\351"+
    "\1\0\1\351\7\0\1\351\1\100\1\351\10\0\1\351"+
    "\2\0\2\351\37\0\1\352\1\77\1\100\1\0\1\100"+
    "\3\352\1\100\1\104\1\105\6\0\1\105\12\0\3\100"+
    "\52\0\13\11\1\0\1\11\4\0\31\11\1\353\10\11"+
    "\1\75\20\0\1\11\10\0\2\354\1\100\1\0\5\354"+
    "\1\0\1\354\4\0\1\354\1\0\2\354\1\0\1\354"+
    "\7\0\1\354\1\100\1\354\10\0\1\354\2\0\2\354"+
    "\37\0\1\355\1\77\1\100\1\0\1\100\3\355\1\100"+
    "\1\104\1\105\6\0\1\105\12\0\3\100\52\0\13\11"+
    "\1\0\1\11\4\0\32\11\1\356\7\11\1\75\20\0"+
    "\1\11\10\0\2\357\1\100\1\0\5\357\1\0\1\357"+
    "\4\0\1\357\1\0\2\357\1\0\1\357\7\0\1\357"+
    "\1\100\1\357\10\0\1\357\2\0\2\357\37\0\1\360"+
    "\1\77\1\100\1\0\1\100\3\360\1\100\1\104\1\105"+
    "\6\0\1\105\12\0\3\100\52\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\361\30\11\1\75\20\0\1\11\10\0"+
    "\2\362\1\100\1\0\5\362\1\0\1\362\4\0\1\362"+
    "\1\0\2\362\1\0\1\362\7\0\1\362\1\100\1\362"+
    "\10\0\1\362\2\0\2\362\37\0\1\363\1\77\1\100"+
    "\1\0\1\100\3\363\1\100\1\104\1\105\6\0\1\105"+
    "\12\0\3\100\52\0\13\11\1\0\1\11\4\0\12\11"+
    "\1\364\27\11\1\75\20\0\1\11\10\0\2\365\1\100"+
    "\1\0\5\365\1\0\1\365\4\0\1\365\1\0\2\365"+
    "\1\0\1\365\7\0\1\365\1\100\1\365\10\0\1\365"+
    "\2\0\2\365\37\0\1\366\1\77\1\100\1\0\1\100"+
    "\3\366\1\100\1\104\1\105\6\0\1\105\12\0\3\100"+
    "\52\0\13\11\1\0\1\11\4\0\2\11\1\320\37\11"+
    "\1\75\20\0\1\11\10\0\2\367\1\100\1\0\5\367"+
    "\1\0\1\367\4\0\1\367\1\0\2\367\1\0\1\367"+
    "\7\0\1\367\1\100\1\367\10\0\1\367\2\0\2\367"+
    "\37\0\1\370\1\77\1\100\1\0\1\100\3\370\1\100"+
    "\1\104\1\105\6\0\1\105\12\0\3\100\54\0\2\371"+
    "\1\100\1\0\5\371\1\0\1\371\4\0\1\371\1\0"+
    "\2\371\1\0\1\371\7\0\1\371\1\100\1\371\10\0"+
    "\1\371\2\0\2\371\37\0\1\372\1\77\1\100\1\0"+
    "\1\100\3\372\1\100\1\104\1\105\6\0\1\105\12\0"+
    "\3\100\56\0\1\100\32\0\1\100\55\0\1\373\1\77"+
    "\1\100\1\0\1\100\3\373\1\100\1\104\1\105\6\0"+
    "\1\105\12\0\3\100\54\0\1\374\1\77\1\100\1\0"+
    "\1\100\3\374\1\100\1\104\1\105\6\0\1\105\12\0"+
    "\3\100\54\0\1\375\1\77\1\100\1\0\1\100\3\375"+
    "\1\100\1\104\1\105\6\0\1\105\12\0\3\100\54\0"+
    "\1\376\1\77\1\100\1\0\1\100\3\376\1\100\1\104"+
    "\1\105\6\0\1\105\12\0\3\100\54\0\2\77\1\100"+
    "\1\0\1\100\3\77\1\100\1\104\1\105\6\0\1\105"+
    "\12\0\3\100\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\2\11\27\1\7\11\7\1\2\11"+
    "\2\1\1\11\1\1\1\0\1\11\2\1\1\11\1\0"+
    "\3\1\1\0\44\1\1\11\3\1\1\11\2\0\4\1"+
    "\1\0\42\1\1\11\1\0\114\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public JavaScriptLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2908) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 22: break;
          case 2: 
            { return token(TokenType.OPERATOR);
            }
          case 23: break;
          case 3: 
            { return token(TokenType.IDENTIFIER);
            }
          case 24: break;
          case 4: 
            { return token(TokenType.NUMBER);
            }
          case 25: break;
          case 5: 
            { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
            }
          case 26: break;
          case 6: 
            { yybegin(SSTRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
            }
          case 27: break;
          case 7: 
            { return token(TokenType.OPERATOR,  PARAN);
            }
          case 28: break;
          case 8: 
            { return token(TokenType.OPERATOR, -PARAN);
            }
          case 29: break;
          case 9: 
            { return token(TokenType.OPERATOR,  CURLY);
            }
          case 30: break;
          case 10: 
            { return token(TokenType.OPERATOR, -CURLY);
            }
          case 31: break;
          case 11: 
            { return token(TokenType.OPERATOR,  BRACKET);
            }
          case 32: break;
          case 12: 
            { return token(TokenType.OPERATOR, -BRACKET);
            }
          case 33: break;
          case 13: 
            { tokenLength += yylength();
            }
          case 34: break;
          case 14: 
            { yybegin(YYINITIAL);
            }
          case 35: break;
          case 15: 
            { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
            }
          case 36: break;
          case 16: 
            { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
            }
          case 37: break;
          case 17: 
            { return token(TokenType.COMMENT);
            }
          case 38: break;
          case 18: 
            { return token(TokenType.TYPE);
            }
          case 39: break;
          case 19: 
            { return token(TokenType.KEYWORD);
            }
          case 40: break;
          case 20: 
            { tokenLength += 2;
            }
          case 41: break;
          case 21: 
            { return token(TokenType.KEYWORD2);
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
