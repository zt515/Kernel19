/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.twpp.text.impl.editor.highlight.language.bash;


import org.twpp.text.impl.editor.highlight.language.DefaultJFlexLexer;
import org.twpp.text.impl.editor.highlight.language.Token;
import org.twpp.text.impl.editor.highlight.language.TokenType;

public final class BashLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\67\1\67\1\1\22\0\1\54\1\6\1\7\1\5"+
    "\1\24\1\0\1\44\1\10\1\25\1\26\1\0\1\45\1\0\1\33"+
    "\1\44\1\44\2\4\1\57\1\60\6\4\1\66\1\44\1\40\1\41"+
    "\1\40\1\0\1\44\26\3\1\65\3\3\1\31\1\11\1\32\1\0"+
    "\1\4\1\12\1\22\1\52\1\21\1\15\1\20\1\14\1\37\1\46"+
    "\1\13\1\61\1\53\1\35\1\56\1\17\1\16\1\55\1\34\1\47"+
    "\1\23\1\36\1\50\1\62\1\51\1\63\1\64\1\42\1\27\1\0"+
    "\1\30\1\43\6\0\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\4\1\11\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\3\4\2\3\3"+
    "\11\2\1\12\3\2\1\1\3\13\1\14\3\0\1\15"+
    "\2\12\1\2\1\16\5\2\1\12\4\2\1\12\1\17"+
    "\3\2\1\12\42\2\1\12\2\2\1\0\1\20\1\3"+
    "\2\0\3\2\1\12\10\2\1\12\14\2\1\12\20\2"+
    "\1\12\15\2\1\21\2\14\2\22\1\23\6\2\1\12"+
    "\4\2\1\12\50\2\1\24\3\2\1\12\30\2\1\12"+
    "\27\2\1\12\3\2\1\25\3\2\1\26\3\2\1\12"+
    "\1\27\1\2\1\12\11\2\1\12\5\2\1\12\10\2"+
    "\1\12\23\2\1\12\23\2\1\12\10\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\70\0\u0428\0\70\0\70\0\70"+
    "\0\70\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\70"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8"+
    "\0\u0930\0\70\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\250"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u0c40\0\u10a0\0\u10d8\0\u1110"+
    "\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\70\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u0e70\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220"+
    "\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\70"+
    "\0\70\0\u09d8\0\70\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0"+
    "\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\70"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8"+
    "\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\250\0\u3b80\0\u3bb8\0\u3bf0\0\250\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\250\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u2300\0\u3f70\0\u3fa8"+
    "\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168"+
    "\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u39c0\0\u4280\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u43d0\0\u2530\0\u4408\0\u4440\0\u4478"+
    "\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u3cd0\0\u47c0"+
    "\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980"+
    "\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40"+
    "\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\6\1\37\1\4\1\2\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\2\1\50\1\51\2\2"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\73\0\1\2"+
    "\70\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\2\0\1\60\1\61\1\62"+
    "\3\60\1\63\61\60\41\0\1\40\26\0\1\64\2\0"+
    "\4\64\1\0\1\64\1\0\56\64\1\65\2\0\5\65"+
    "\2\0\56\65\1\66\2\0\6\66\2\0\55\66\3\0"+
    "\2\4\6\0\1\4\1\67\1\70\1\4\1\71\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\4"+
    "\1\72\7\4\5\0\2\4\6\0\1\73\1\4\1\74"+
    "\1\75\3\4\1\76\1\77\10\0\2\4\1\100\1\101"+
    "\2\0\1\4\3\0\1\4\1\102\1\103\3\4\1\0"+
    "\1\4\1\104\7\4\5\0\2\4\6\0\1\105\1\70"+
    "\1\106\1\107\1\4\1\110\1\70\1\111\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\2\4\1\70\3\4\1\0"+
    "\1\4\1\112\7\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\113\10\4"+
    "\5\0\2\4\6\0\1\114\2\4\1\115\1\4\1\116"+
    "\2\4\1\117\10\0\1\4\1\70\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\4\4"+
    "\1\120\1\4\1\121\1\4\1\122\10\0\1\4\1\123"+
    "\1\124\1\125\2\0\1\4\3\0\6\4\1\0\4\4"+
    "\1\126\1\127\1\130\2\4\5\0\2\4\6\0\1\4"+
    "\1\131\1\70\1\132\3\4\1\133\1\134\10\0\1\4"+
    "\1\135\2\4\2\0\1\4\3\0\1\136\1\137\1\104"+
    "\2\4\1\140\1\0\1\70\1\100\7\4\5\0\2\4"+
    "\6\0\10\4\1\141\10\0\1\4\1\142\2\4\2\0"+
    "\1\4\3\0\3\4\1\143\2\4\1\0\1\144\10\4"+
    "\5\0\2\4\6\0\1\4\1\145\1\146\1\147\1\4"+
    "\1\150\1\151\1\4\1\152\10\0\1\4\1\153\1\154"+
    "\1\4\2\0\1\4\3\0\1\155\1\4\1\156\3\4"+
    "\1\0\1\157\6\4\1\160\1\4\27\0\1\161\70\0"+
    "\1\162\60\0\1\163\1\164\14\0\1\165\1\0\1\165"+
    "\2\0\1\40\30\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\2\4\1\166\3\4\1\0\11\4"+
    "\5\0\2\4\6\0\3\4\1\167\1\70\1\170\2\4"+
    "\1\171\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\172\10\4\5\0\2\4\6\0\1\173\2\4\1\174"+
    "\1\4\1\175\1\4\1\176\1\177\10\0\2\4\1\200"+
    "\1\4\2\0\1\4\3\0\1\201\1\202\4\4\1\0"+
    "\7\4\1\203\1\4\5\0\2\4\6\0\5\4\1\204"+
    "\1\4\1\205\1\4\10\0\4\4\2\0\1\206\3\0"+
    "\1\4\1\207\4\4\1\0\11\4\43\0\1\40\1\0"+
    "\1\40\71\0\1\40\25\0\2\4\6\0\1\210\2\4"+
    "\1\211\1\4\1\212\1\4\1\213\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\5\4\1\214\1\100\1\215\1\216\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\1\4\1\217\7\4"+
    "\5\0\2\4\6\0\4\4\1\220\3\4\1\221\10\0"+
    "\1\4\1\222\2\4\2\0\1\4\3\0\2\4\1\223"+
    "\3\4\1\0\1\4\1\224\7\4\5\0\2\4\6\0"+
    "\6\4\1\70\1\225\1\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\226\1\227\4\4\1\0\11\4\5\0\2\4"+
    "\6\0\6\4\1\70\1\230\1\4\10\0\3\4\1\70"+
    "\2\0\1\231\3\0\1\4\1\232\1\233\3\4\1\0"+
    "\11\4\5\0\2\4\6\0\1\234\10\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\235\2\4\1\236\3\4\1\237\1\70\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\240\1\241\1\242"+
    "\2\4\1\0\11\4\5\0\2\4\6\0\3\4\1\243"+
    "\3\4\1\244\1\4\10\0\2\4\1\245\1\4\2\0"+
    "\1\4\3\0\5\4\1\246\1\0\1\4\1\247\3\4"+
    "\1\70\3\4\5\0\2\4\6\0\3\4\1\250\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\1\70\1\4\1\251\6\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\252"+
    "\7\4\5\0\2\4\6\0\7\4\1\253\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\5\4\1\254\3\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\3\4\1\255\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\1\256\7\0\11\256\10\0\4\256"+
    "\2\0\1\256\3\0\6\256\1\0\2\256\2\0\5\256"+
    "\2\0\1\60\1\61\1\62\65\60\2\0\1\62\65\0"+
    "\1\63\1\257\1\260\65\63\1\64\2\0\4\64\1\261"+
    "\1\64\1\0\56\64\1\65\2\0\5\65\2\0\42\65"+
    "\1\262\13\65\1\66\2\0\6\66\1\0\1\263\55\66"+
    "\3\0\2\4\6\0\2\4\1\264\3\4\1\265\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\2\4\1\100\3\4"+
    "\1\0\11\4\5\0\2\4\6\0\10\4\1\266\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\177\10\4\5\0\2\4\6\0\4\4"+
    "\1\242\4\4\10\0\1\4\1\267\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\270"+
    "\1\271\7\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\1\4"+
    "\1\242\2\4\2\0\1\4\3\0\1\4\1\272\4\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\1\4"+
    "\1\273\2\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\6\4\1\143\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\1\70\10\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\274\4\4\1\0"+
    "\11\4\5\0\2\4\6\0\5\4\1\267\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\4\4\1\275\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\2\4\1\70\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\1\4\1\276"+
    "\7\4\10\0\3\4\1\70\2\0\1\4\3\0\1\4"+
    "\1\277\4\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\1\4\1\300\4\4"+
    "\1\0\11\4\5\0\2\4\6\0\4\4\1\301\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\6\4\1\302\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\267\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\5\4"+
    "\1\303\3\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\5\4\1\244\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\6\4\1\267\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\304"+
    "\5\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\2\4\1\252\1\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\1\4\1\305"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\7\4\1\306\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\5\4\1\70\3\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\307\5\4\1\0\11\4\5\0\2\4\6\0\7\4"+
    "\1\310\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\311\7\4\1\267"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\312\5\4\1\0\11\4\5\0\2\4\6\0"+
    "\5\4\1\313\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\7\4\1\314"+
    "\1\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\1\104\4\4\1\315\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\316"+
    "\10\4\5\0\2\4\6\0\2\4\1\317\6\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\4\4\1\320\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\4\1\321\7\4\5\0"+
    "\2\4\6\0\10\4\1\322\10\0\1\4\2\70\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\1\157\10\4\5\0\2\4\6\0\5\4\1\323"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\324\5\4\10\0"+
    "\3\4\1\325\2\0\1\4\3\0\1\4\1\326\3\4"+
    "\1\327\1\0\1\4\1\330\7\4\5\0\2\4\6\0"+
    "\3\4\1\331\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\10\4\1\332"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\333\10\4\5\0\2\4\6\0"+
    "\1\334\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\5\4\1\70\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\70\1\4\2\0"+
    "\1\4\3\0\1\4\1\335\4\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\100\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\336\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\104\1\337\3\4\1\0"+
    "\11\4\5\0\2\4\6\0\2\4\1\70\6\4\10\0"+
    "\1\70\1\126\1\70\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\340\4\4\1\0\1\70"+
    "\10\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\1\70\5\4\1\0\11\4\5\0\2\4"+
    "\6\0\3\4\1\341\1\4\1\274\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\342\4\4\1\0\11\4\5\0\2\4\6\0\1\343"+
    "\2\4\1\344\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\345\3\4\1\0\11\4\5\0\2\4\6\0"+
    "\2\4\1\307\6\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\70\7\4\5\0\2\4\6\0"+
    "\11\4\10\0\1\4\1\346\2\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\4\4\1\315"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\347\7\4\27\0\1\350\62\0\1\40\103\0"+
    "\1\40\53\0\1\40\15\0\1\40\34\0\2\4\6\0"+
    "\3\4\1\351\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\3\4\1\143"+
    "\2\4\1\352\2\4\10\0\3\4\1\353\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\10\4"+
    "\1\254\10\0\2\4\1\70\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\3\4\1\311"+
    "\5\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\6\4\1\70\2\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\354\4\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\4\1\355\7\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\356\3\4\1\0\1\70\10\4\5\0\2\4"+
    "\6\0\5\4\1\70\2\4\1\104\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\314\10\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\70\4\4\1\0\11\4\5\0\2\4\6\0\3\4"+
    "\1\357\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\7\4\1\70\1\4"+
    "\5\0\2\4\6\0\7\4\1\360\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\2\4\1\267\3\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\267\10\4\5\0\2\4\6\0"+
    "\11\4\10\0\2\4\1\361\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\3\4\1\143\2\4\1\0"+
    "\11\4\5\0\2\4\6\0\1\100\10\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\3\4\1\362\1\4\1\100\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\10\4\1\363\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\10\4\1\364"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\7\4\1\242\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\10\4\1\152\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\4\4\1\365"+
    "\2\4\1\366\1\4\10\0\2\4\1\367\1\4\2\0"+
    "\1\4\3\0\4\4\1\326\1\4\1\0\1\4\1\370"+
    "\3\4\1\70\3\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\70"+
    "\7\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\7\4\1\371\1\4\5\0"+
    "\2\4\6\0\2\4\1\251\6\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\372\4\4\1\373\1\4\1\374\1\375\10\0\2\4"+
    "\1\376\1\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\5\4\1\377\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\u0100\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\2\4\1\u0101"+
    "\2\4\1\u0102\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\3\4\1\u0103"+
    "\3\4\1\270\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\2\4\1\356\1\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\1\u0104\2\4\1\u0105\1\4"+
    "\1\u0106\3\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\111\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\10\4\1\u0107\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\u0108"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\5\4\1\u0109\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\1\u010a\10\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\u010b\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\4\4\1\u010c\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\242\10\4\5\0\2\4\6\0"+
    "\10\4\1\u010d\10\0\2\4\1\u010e\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\u010f"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\10\4\1\u0110\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\2\4\1\70\6\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\1\4\1\267\1\u0111"+
    "\3\4\1\0\11\4\5\0\2\4\6\0\4\4\1\70"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\u0112\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\1\u0113\1\u0114\1\251\1\4\1\330\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\5\4\1\70\3\4\5\0\2\4"+
    "\6\0\1\244\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\1\u0115\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\10\4\1\u0116\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\u0117"+
    "\4\4\1\0\11\4\5\0\2\4\6\0\10\4\1\70"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\5\4\1\104\3\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\256"+
    "\6\0\11\256\10\0\4\256\2\0\1\256\3\0\6\256"+
    "\1\0\11\256\4\0\1\260\70\0\2\4\6\0\3\4"+
    "\1\324\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\3\4\1\u0118\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\2\4\1\u0119\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\5\4\1\70\3\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\10\4"+
    "\1\143\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\u011a\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\u011b\7\4\5\0\2\4\6\0"+
    "\10\4\1\267\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\5\4\1\100\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\6\4\1\u011c\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\4\1\u011d\7\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\4\4"+
    "\1\u011e\1\4\1\u011f\1\4\1\70\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\5\4\1\u0120\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\5\4\1\u0121"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\1\4\1\u0122"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\10\4\1\u010c\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\2\4\1\100\3\4"+
    "\1\0\11\4\5\0\2\4\6\0\3\4\1\u0123\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\4\4\1\u0124\1\4\1\0\11\4\5\0\2\4"+
    "\6\0\3\4\1\70\5\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\6\4"+
    "\1\u0125\2\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\4\1\70\7\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\2\4\1\u0126\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\6\4\1\104\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\70\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\6\4\1\70\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\3\4\1\357\1\4\1\313\1\4"+
    "\1\u0127\1\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\70\4\4\1\0\11\4\5\0\2\4\6\0\1\270"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\2\4\1\u0128"+
    "\1\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\4\1\u0129\7\4\5\0\2\4\6\0"+
    "\5\4\1\u012a\3\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\7\4\1\u0115"+
    "\1\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\3\4\1\244\2\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\4\1\100\4\4\1\0\11\4\5\0\2\4\6\0"+
    "\3\4\1\u012b\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\6\4\1\265"+
    "\2\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\242\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\4\4\1\u012c\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\215"+
    "\3\4\1\0\11\4\5\0\2\4\6\0\5\4\1\u012d"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\7\4\1\254\1\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\3\4\1\u012e\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\4\1\311\7\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\114\4\4\1\0"+
    "\11\4\5\0\2\4\6\0\5\4\1\201\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\6\4\1\u012f\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\7\4\1\114\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\1\4\1\104"+
    "\7\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\104\10\4\5\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u0130\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\104"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\1\4\1\u0131"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\u0132\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\7\4\1\u0133\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\3\4\1\u0134"+
    "\1\u011e\4\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\u0135\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\70"+
    "\7\4\5\0\2\4\6\0\5\4\1\u0136\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\6\4\1\152\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\104"+
    "\4\4\1\0\11\4\5\0\2\4\6\0\6\4\1\u0137"+
    "\2\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\70\10\4\5\0\2\4\6\0\3\4\1\u0138\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\2\4\1\u0139\3\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u013a\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\2\4\1\u013b\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\114\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\2\4\1\u013c\6\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\u013d"+
    "\3\4\1\0\11\4\5\0\2\4\6\0\10\4\1\216"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\4\4\1\315\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\1\70\1\4\1\254\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\6\4\1\u013e\2\4\5\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\142\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\267\7\4\5\0\2\4\6\0\5\4\1\104"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\1\323\5\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\314\10\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\1\4\1\u013f\4\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\1\4\1\346\7\4\5\0\2\4\6\0\5\4\1\u0140"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\4\4\1\u0140\4\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\2\4\1\u0111\3\4\1\0\11\4\5\0\2\4\6\0"+
    "\6\4\1\152\2\4\10\0\1\4\1\267\2\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\7\4\1\u0141\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\u0142\4\4\1\0"+
    "\11\4\5\0\2\4\6\0\5\4\1\u013b\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\70\5\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\u0143\10\4\5\0\2\4\6\0"+
    "\7\4\1\143\1\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\u0144\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\1\4\1\u0145"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\3\4\1\70\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\10\4"+
    "\1\u0146\10\0\2\4\1\267\1\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\u0147\5\4\1\0\11\4"+
    "\5\0\2\4\6\0\4\4\1\u0148\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\242"+
    "\5\4\1\0\11\4\5\0\2\4\6\0\4\4\1\104"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\u0149\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\10\4\1\u014a\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\u014b"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\1\4\1\70\4\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\2\4\1\u011b\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\3\4\1\254\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\4\4\1\u014c\4\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\7\4\1\u012d\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\u014d\4\4\1\0\11\4\5\0\2\4\6\0\7\4"+
    "\1\104\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\2\4"+
    "\1\u014e\1\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\3\4\1\70\5\4\5\0\2\4"+
    "\6\0\7\4\1\u014f\1\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\3\4"+
    "\1\u0150\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\10\4\1\u0151\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\7\4\1\u0152\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\3\4\1\u0153\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\1\4\1\267\2\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\u0154\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\4\4\1\242\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\u0155\10\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\7\4\1\u0127\1\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\3\4\1\104\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\u0156\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\1\4\1\314\2\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\1\u0157\10\4\5\0"+
    "\2\4\6\0\7\4\1\111\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\2\4\1\264\6\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\1\u0158\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\7\4\1\u0159\1\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\1\4\1\70\1\267\1\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\104"+
    "\3\4\1\0\11\4\5\0\2\4\6\0\4\4\1\u015a"+
    "\4\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\5\4\1\u015b\3\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\11\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\1\u015c\10\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\254"+
    "\10\4\5\0\2\4\6\0\3\4\1\u015d\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\4\4\1\u011e\4\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\3\4\1\u015e\5\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\1\4\1\244\4\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\1\u015f\10\4\5\0\2\4"+
    "\6\0\7\4\1\u0160\1\70\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\1\4\1\330\7\4\5\0\2\4"+
    "\6\0\6\4\1\u0161\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\1\4"+
    "\1\u0162\7\4\5\0\2\4\6\0\5\4\1\u0163\3\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\2\4\1\70\6\4\5\0\2\4"+
    "\6\0\11\4\10\0\2\4\1\250\1\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\4\4\2\0\1\4\3\0\3\4\1\242\2\4"+
    "\1\0\11\4\5\0\2\4\6\0\6\4\1\u0164\2\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\2\4\1\u0165\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\1\4\1\254\2\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\3\4"+
    "\1\u0166\5\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\1\4\1\307\7\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\1\4\1\u0167\7\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\u0168\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\1\4\1\267"+
    "\7\4\5\0\2\4\6\0\11\4\10\0\1\4\1\u0169"+
    "\2\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\6\4\1\u016a\2\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\267"+
    "\4\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\5\4\1\304\1\0\11\4"+
    "\5\0\2\4\6\0\3\4\1\314\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\4\4\1\u016a\4\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\7\4"+
    "\1\u016b\1\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\3\4\1\254\5\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\4\4\1\143\4\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\6\4\1\u016c\2\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\11\4"+
    "\10\0\2\4\1\u016d\1\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\11\4\10\0\4\4"+
    "\2\0\1\4\3\0\1\4\1\u016e\4\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\2\4\1\254\1\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\11\4\10\0\4\4\2\0\1\4\3\0\1\4"+
    "\1\200\4\4\1\0\11\4\5\0\2\4\6\0\4\4"+
    "\1\u016f\4\4\10\0\4\4\2\0\1\4\3\0\6\4"+
    "\1\0\11\4\5\0\2\4\6\0\2\4\1\242\6\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\3\4\1\u0170\5\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\70\10\4\10\0\4\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\1\254\10\4"+
    "\10\0\4\4\2\0\1\4\3\0\6\4\1\0\11\4"+
    "\5\0\2\4\6\0\11\4\10\0\4\4\2\0\1\4"+
    "\3\0\1\143\5\4\1\0\11\4\5\0\2\4\6\0"+
    "\1\4\1\70\3\4\1\u0171\1\u0172\2\4\10\0\4\4"+
    "\2\0\1\4\3\0\6\4\1\0\11\4\5\0\2\4"+
    "\6\0\1\4\1\254\7\4\10\0\4\4\2\0\1\4"+
    "\3\0\6\4\1\0\11\4\5\0\2\4\6\0\1\u010c"+
    "\10\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\3\4\1\244\5\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\3\4\1\u0173\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\2\4\1\267"+
    "\3\4\1\0\11\4\5\0\2\4\6\0\11\4\10\0"+
    "\4\4\2\0\1\4\3\0\4\4\1\70\1\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\2\4\1\314"+
    "\1\4\2\0\1\4\3\0\1\u0174\5\4\1\0\11\4"+
    "\5\0\2\4\6\0\2\4\1\70\6\4\10\0\1\70"+
    "\3\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\3\4\1\u0175\5\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\1\4\1\200\2\4\2\0\1\4\3\0"+
    "\6\4\1\0\11\4\5\0\2\4\6\0\2\4\1\267"+
    "\6\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\4\4\1\247\4\4\10\0"+
    "\4\4\2\0\1\4\3\0\6\4\1\0\11\4\5\0"+
    "\2\4\6\0\7\4\1\100\1\4\10\0\4\4\2\0"+
    "\1\4\3\0\6\4\1\0\11\4\5\0\2\4\6\0"+
    "\11\4\10\0\4\4\2\0\1\4\3\0\1\4\1\254"+
    "\4\4\1\0\11\4\5\0\2\4\6\0\5\4\1\77"+
    "\3\4\10\0\4\4\2\0\1\4\3\0\6\4\1\0"+
    "\11\4\5\0\2\4\6\0\11\4\10\0\4\4\2\0"+
    "\1\4\3\0\2\4\1\111\3\4\1\0\11\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\1\1\4\11\6\1\1\11"+
    "\21\1\1\11\1\1\3\0\72\1\1\0\1\11\1\1"+
    "\2\0\72\1\2\11\1\1\1\11\64\1\1\11\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public BashLexer() {
        super();
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;
    private static final byte DO        = 4;
    private static final byte CASE      = 5;
    private static final byte IF        = 5;
    private static final byte INT_EXPR  = 6;

    @Override
    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BashLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* skip */
            }
          case 24: break;
          case 2: 
            { return token(TokenType.IDENTIFIER);
            }
          case 25: break;
          case 3: 
            { return token(TokenType.OPERATOR);
            }
          case 26: break;
          case 4: 
            { return token(TokenType.OPERATOR,  PARAN);
            }
          case 27: break;
          case 5: 
            { return token(TokenType.OPERATOR, -PARAN);
            }
          case 28: break;
          case 6: 
            { return token(TokenType.OPERATOR,  CURLY);
            }
          case 29: break;
          case 7: 
            { return token(TokenType.OPERATOR, -CURLY);
            }
          case 30: break;
          case 8: 
            { return token(TokenType.OPERATOR,  BRACKET);
            }
          case 31: break;
          case 9: 
            { return token(TokenType.OPERATOR, -BRACKET);
            }
          case 32: break;
          case 10: 
            { return token(TokenType.KEYWORD);
            }
          case 33: break;
          case 11: 
            { return token(TokenType.COMMENT);
            }
          case 34: break;
          case 12: 
            { return token(TokenType.COMMENT2);
            }
          case 35: break;
          case 13: 
            { return token(TokenType.KEYWORD,  IF);
            }
          case 36: break;
          case 14: 
            { return token(TokenType.KEYWORD, -IF);
            }
          case 37: break;
          case 15: 
            { return token(TokenType.KEYWORD,  DO);
            }
          case 38: break;
          case 16: 
            { return token(TokenType.KEYWORD, -INT_EXPR);
            }
          case 39: break;
          case 17: 
            { return token(TokenType.TYPE);
            }
          case 40: break;
          case 18: 
            { return token(TokenType.STRING);
            }
          case 41: break;
          case 19: 
            { return token(TokenType.STRING2);
            }
          case 42: break;
          case 20: 
            { return token(TokenType.KEYWORD,  INT_EXPR);
            }
          case 43: break;
          case 21: 
            { return token(TokenType.KEYWORD, -DO);
            }
          case 44: break;
          case 22: 
            { return token(TokenType.KEYWORD, -CASE);
            }
          case 45: break;
          case 23: 
            { return token(TokenType.KEYWORD,  CASE);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
